apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: namespace
    app.kubernetes.io/instance: system
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: cl-operator
    app.kubernetes.io/part-of: cl-operator
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: cl-operator
    app.kubernetes.io/part-of: cl-operator
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /manager
        args:
        - --leader-elect
        image: controller:latest
        imagePullPolicy: IfNotPresent
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
      volumeMounts:
      - name: ca
        mountPath: /etc/ssl/certs/clink_ca.pem
        subPath: "ca"
        readOnly: true
    volumes:
    - name: ca
      secret:
        secretName: cl-fabric

---
apiVersion: v1
kind: Secret
metadata:
  name: cl-fabric
data:
  ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU0akNDQXNxZ0F3SUJBZ0lJRk1zUDBjQURTSTh3RFFZSktvWklodmNOQVFFTEJRQXdEekVOTUFzR0ExVUUKQXhNRWNtOXZkREFlRncweU16RXlNRFV4TWpNNU1qRmFGdzB6TXpFeU1EVXhNak01TWpGYU1BOHhEVEFMQmdOVgpCQU1UQkhKdmIzUXdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFDMFR0SU94OGxhClhWbVdnQUZHMXNDQmVKQ3g3aXpES3BVZDRpWDlrem00SkFoWm1HQTJhNlR6R2lheHVmK3ZSMTFzN3VCVTBjQU4Kb2V2c0tBM1Zydit3SnA2ZWgxRm9USXk4R1F6cFV6ZEFLQnBqQ0N4QjNMZXZpc2lPZTdhSG9qQ0kyQTBlUnFlNApjTGF1TUNYcVNZOHN5M3NqRzRyWGxWcnI3NnFtWGZVc242b09hRmNBWURSUWMrZ2x1eHF1eEVUVXpENDgyb01UCmkvb1JnTEJWM25XNlFLcExLRWNMNVdGQ1oxSVE5RWlEL0NaNDVLZkYwemNXZFhiTDkzRHlVakN6MUdlaGN6VTAKNVA0YjViOGpuNHBKK1AvSFQ2WEFCalZZb091QXlPQXNNcHBaZ3JKMDBLcnF6cVJ1Vnh2UHlTMHZUR2t5Q1RPUQpzdURVbmJSSlRoNzBkcWY1b1JiaFlRUjlzUGc0aDRCY3J3S3Q1TU5DY2tVLzhrb0s1bkFBbzJxREdlNGNYMVBrCkdZZWNTZForb0dBNEhVSE1XSERHbWtKK0crQ0UzOW1YMGc0b0VIenEvNEtnU0txWWxNZVd5dnl0VC9KT3p3U0cKS2lGZWJCTzRkWk1MaG1jdDN2ZTBsS2l1L3BaTW1uNUtZNHhTMEl5WW9PYWRzVWlEcUp6ZGg5SDA3YnV5eFp1UApHU2cyQjdBSnFKVXZqejdyYUxSWElFRnRWNk1LeVFOeG9BNXI4RWt2TFVVQjBaWTZGR0hKUHcySnJtQmNRek5NCkU4WGl4bERWU0tFWFp6ZlI0Q3JBcVZyS1N1VUVoclY1V0tPd0R0cDRobEZsdlZQeHc2OThtMkxMWVZOeFR1aloKY2RMQTBqL0p2bStrME9IQVpZY1hQZ3c0am5sMVV2YzI5d0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQwpBUVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVMVBNaCtyS2p4aVJpVWtKYWlsakJwTWVqCmx4QXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBRU5pbHhjaWpraWM0ek04TmVEcWdmK3JVamwzK3hCZEs4SDIKQldyclFrRS9qQ0pnK2Y3ck9PSnhvS2FzZFlJeGZ3MmxhV1dKdGNQS0g4RmZqemR2YnJOZHd6OWZHaDlFTzlvNgpJNDlCSWhlZTdjS0tUdmVQY0hjYzQvaW1pcm94NUd5MUdISTNZQy9Gcm92MWwwWEVqMGp4eVVhOFdzT2R1dGZNCld3Vi9oZlVDNzlyemdTNTZvK2J0aFFPS0tlNjJpZVVmU3l2VWhvWFNrSTJlVU9vOXh3ZXUvNDNKYkZPbjNoVXcKVnJvT2tTOEdBUHpYTXl4RzUxejNiUXhUeXA4T3RvYTROZ1preEV1UlNFdms5TWJtL2JWaVdvdlROWnpxeExtSQp4Y3lpcXYxdG5vRGMxUndkYTE2UG1xNERBdDBuUzZ1ajBJbDA3U0hsdEdQVERYUktOUmsvcTU1NjlJb0pZbnpRCjhDQmd5b0ZDb2RNMTVvNCt3dTN6enEvNnpLTmZnRmZEaTFkRWY3K3ptYTZId0dsZGttUndlVWZYWXk5clZaL3AKcWFvSjl0c0hGL2JpRmZROExSM2tOanIzS0J6bmk4TlR5YWhGMkViOFdoTzFUaGhpeVlkZVVCb3RxdHRMNFRwcQpkYlFPQlRFTmovaW44d00yMkJ0a01yZTRaZ0hkYk5mdXZPd0VodHU2WHB4R3JrWnMwaGJrMzRwQ2xya3BmNm9yCmxPNy9TcENEa1pVSFJCaGxKWmdxVWY5OURVRmQ4TFd3R3NQdjJ2SXFSVStZZ1YrMHFyejFxaFFBZDlMREU3V0YKd216TWUyR3M0T0hzZlJCYnF3a1BXNnVoUmxZaElaS0N5cHFLL3NZclJqbWQwazhwQjJNU2dSUXQ2UDBwNlJwKwpKVEwwVWlFMQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==